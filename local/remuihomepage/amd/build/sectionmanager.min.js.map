{"version":3,"sources":["sectionmanager.js"],"names":["define","$","Ajax","Templates","Notification","Notice","RemUIEvents","SECTIONSELECTOR","loadedSections","sectionDeletion","SectionManager","this","sectioncontainer","templateprefix","hasClass","prototype","setLoadedSection","id","json","getLoadedSection","instanceid","setSectionName","name","setInstanceid","templateprefixer","str","activateLoader","data","getJsonParsedData","callback","saveSectionsOrder","trigger","scrollToSection","bind","renderTemplate","sectionname","selector","offset","top","animate","scrollTop","template","configdata","render","then","html","js","appendNodeContents","type","SECTION_ADDED","getSectionElement","find","playSliderVideo","slider","each","index","video","pause","play","renderTemplates","pop","section","lazyloading","done","height","window","innerHeight","appearanimation","hideAllSectionsLoader","jQuery","length","fail","ex","exception","JSON","parse","addSection","call","methodname","args","removeClass","setTimeout","hide","showAllSectionsLoader","addClass","css","showSectionLoader","show","toggleClass","addAllSections","response","sections","reverse","LoadAllSections","reloadSection","success","context","reloadingSection","replaceNode","SECTION_UPDATED","updateSection","formdata","jsonformdata","M","util","get_string","deletionTimer","action","clearInterval","timer","setInterval","time","parseInt","text","remove","deleteInstance","getSectionsOrder","order","push","transparentheader","is","reorderSection","move","saveorder","next","insertBefore","prev","insertAfter","updateVisibility","visible","visibilityButton","attr"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Section manager class\n *\n * @module     local_remuihomepage/sectionmanager\n * @copyright  (c) 2018 WisdmLabs (https://wisdmlabs.com/)\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\n    'jquery',\n    'core/ajax',\n    'core/templates',\n    'core/notification',\n    'theme_remui/notice',\n    'theme_remui/events'\n], function(\n    $,\n    Ajax,\n    Templates,\n    Notification,\n    Notice,\n    RemUIEvents\n) {\n    let SECTIONSELECTOR = \"\";\n\n    // Keep the loaded sections in memory.\n    var loadedSections = [];\n\n    // Keep section deletion timers.\n    var sectionDeletion = [];\n\n    function SectionManager () {\n        this.sectioncontainer = '#page-site-index .home-sections';\n        this.templateprefix = 'local_remuihomepage/';\n        this.templateprefix += $('body').hasClass('remui_lite') ? 'lite_' : '';\n    }\n\n    /**\n     * Set loaded section\n     * @param {Number} id   section is\n     * @param {String} json sections sections list\n     */\n    SectionManager.prototype.setLoadedSection = function(id, json) {\n        loadedSections[id] = json;\n    };\n\n    /**\n     * Get loaded section\n     * @param  {Number} instanceid Instance id of section\n     * @return {String}            Section json\n     */\n    SectionManager.prototype.getLoadedSection = function(instanceid) {\n        return loadedSections[instanceid];\n    };\n\n    /**\n     * Set name of section\n     * @param {String} name Section name\n     */\n    SectionManager.prototype.setSectionName = function(name) {\n        this.name = name;\n    };\n\n    /**\n     * Set instance id\n     * @param {Number} id Instance id\n     */\n    SectionManager.prototype.setInstanceid = function(id) {\n        this.instanceid = id;\n        SECTIONSELECTOR = 'section[data-instance=\"' + id + '\"]';\n    };\n\n    /**\n     * Template prefix string\n     * @param  {String} str Prefix string\n     * @return {String}     Return template name with prefix\n     */\n    SectionManager.prototype.templateprefixer = function(str) {\n        return this.templateprefix + str;\n    };\n\n    /**\n     * Activate loader to load section on page\n     * @param  {object} data section data\n     */\n    SectionManager.prototype.activateLoader = function(data) {\n        var data = this.getJsonParsedData(data);\n        let callback = (function() {\n            this.setInstanceid(data.id);\n            this.saveSectionsOrder();\n            $('body').trigger('scroll');\n            this.scrollToSection('section[data-instance=\"' + data.id + '\"]');\n        }).bind(this);\n\n        this.renderTemplate(this.templateprefixer(data.sectionname), data, this.sectioncontainer, callback);\n    };\n\n    /**\n     * Scroll To the section\n     * @param {String} selector Section selector\n     */\n    SectionManager.prototype.scrollToSection = function(selector) {\n        var offset = $(selector).offset().top - 65;\n        $('html, body').animate({scrollTop: offset}, 1000);\n    };\n\n    /**\n     * Render template and append in sections list\n     * @param  {string}   template   Template name\n     * @param  {object}   configdata section data\n     * @param  {string}   selector   Container selector\n     * @param  {function} callback   Callback to execute after rendering template\n     */\n    SectionManager.prototype.renderTemplate = function(template, configdata, selector, callback) {\n        Templates.render(template, configdata)\n        .then(function(html, js) {\n            Templates.appendNodeContents(selector, html, js);\n            $('body').trigger({\n                type: RemUIEvents.SECTION_ADDED,\n                configdata: configdata\n            });\n            if (callback != null) {\n                callback();\n            }\n        });\n    };\n\n    /**\n     * Get section element by instance id\n     * @param  {Number} instanceid Section instance id\n     * @return {DOM}               Section element\n     */\n    SectionManager.prototype.getSectionElement = function(instanceid) {\n        if (instanceid !== false) {\n            this.setInstanceid(instanceid);\n        }\n        return $('body').find(SECTIONSELECTOR);\n    };\n\n    /**\n     * Play video of visible slide\n     * @param  {Number} instanceid Section instance id\n     */\n    SectionManager.prototype.playSliderVideo = function(instanceid) {\n        var slider = this.getSectionElement(instanceid);\n        slider.find('.carousel-item:not(.active) video').each(function(index, video) {\n            video.pause();\n        });\n        slider.find('.carousel-item.active video').each(function(index, video) {\n            video.play();\n        });\n    };\n\n    /**\n     * Render first template from the configdata array\n     * @param  {array}  configdata Configuration array\n     * @param  {string} selector   Root container selector\n     */\n    SectionManager.prototype.renderTemplates = function(configdata, selector) {\n        let json = configdata.pop();\n        let section = this.getJsonParsedData(json);\n        this.setLoadedSection(section.id, json);\n        section.lazyloading = true;\n        Templates.render('local_remuihomepage/common', section)\n        .done((function(html, js) {\n            html = $(html).height(window.innerHeight + 'px');\n            Templates.appendNodeContents(selector, html, js);\n            // Show section immediatly if appear animation is disabled.\n            if (appearanimation == false) {\n                $('body').trigger('scroll');\n            }\n            this.hideAllSectionsLoader();\n            jQuery(window).scrollTop(0);\n            if (configdata.length == 0) {\n                return;\n            }\n            this.renderTemplates(configdata, selector);\n        }).bind(this)).fail((function(ex) {\n            this.hideAllSectionsLoader();\n            Notification.exception(ex);\n        }).bind(this));\n    };\n\n    /**\n     * Returns parsed data For this instance using $.parseJSON which is deprecated method,\n     * find alternative for this and JSON.parse method add unnecessary thing in object.\n     * @param  {String} data Json data\n     * @return {Object}      Parsed json data\n     */\n    SectionManager.prototype.getJsonParsedData = function(data) {\n        return JSON.parse(data);\n    };\n\n    /**\n     * Add section to page\n     */\n    SectionManager.prototype.addSection = function() {\n        Ajax.call([{\n            methodname: 'local_remuihomepage_create_section_instance',\n            args: {sectionname: this.name},\n            done: this.activateLoader.bind(this),\n            fail: Notification.exception\n        }]);\n    };\n\n    /**\n     * Hide main loader which covers all sections area till sections are loaded\n     */\n    SectionManager.prototype.hideAllSectionsLoader = function() {\n        $('.sections-loader-wrapper').removeClass('show');\n        setTimeout(function() {\n            $('.sections-loader-wrapper').hide();\n            $(window).trigger('scroll');\n        }, 300);\n    };\n\n    /**\n     * Hide main loader which covers all sections area till sections are loaded\n     */\n    SectionManager.prototype.showAllSectionsLoader = function() {\n        $('.sections-loader-wrapper').addClass('show').css('display', 'block');\n    };\n\n    /**\n     * Show section loader\n     * @param  {int}  instanceid Instance id of section\n     * @param  {Boolean} show       true if show loader else false\n     */\n    SectionManager.prototype.showSectionLoader = function(instanceid, show) {\n        $('.section-loader-wrapper[data-instance=\"' + instanceid + '\"]').toggleClass('d-none', !show);\n    };\n\n    /**\n     * Render all section on page load\n     * @param {response} response Ajax call response\n     */\n    SectionManager.prototype.addAllSections = function(response) {\n        response.sections.reverse();\n        if (response.sections.length == 0) {\n            this.hideAllSectionsLoader();\n            return;\n        }\n        this.renderTemplates(response.sections, this.sectioncontainer);\n    };\n\n    /**\n     * Load all section configuration\n     */\n    SectionManager.prototype.LoadAllSections = function() {\n        Ajax.call([{\n            methodname: 'local_remuihomepage_fetch_all_instances',\n            args: {},\n            done: this.addAllSections.bind(this),\n            fail: (function(ex) {\n                Notification.exception(ex);\n                this.hideAllSectionsLoader();\n            }).bind(this)\n        }]);\n    };\n\n    /**\n     * Reload section if configuration is updated.\n     * @param  {Object}   response js object with updation status and section context\n     * @param  {Function} callback Callback function to run after reloading section\n     */\n    SectionManager.prototype.reloadSection = function(response, callback) {\n        if (response.success == false) {\n            return;\n        }\n        let context = JSON.parse(response.context);\n        this.setInstanceid(context.id);\n        let reloadingSection = $(SECTIONSELECTOR);\n        Templates.render(this.templateprefixer(context.sectionname), context)\n        .done((function(html, js) {\n            html = $(html);\n            // Show section immediatly if appear animation is disabled.\n            if (appearanimation == false) {\n                $(html).removeClass('invisible');\n            }\n            Templates.replaceNode(reloadingSection, html, js);\n            $('body').trigger({\n                type: RemUIEvents.SECTION_UPDATED,\n                configdata: context\n            });\n            if (context.sectionname == 'slider') {\n                this.playSliderVideo(context.id);\n            }\n            $('body').trigger('scroll');\n            if (callback != null) {\n                callback();\n            }\n        }).bind(this))\n        .fail((function(ex) {\n            this.showSectionLoader(this.instanceid, false);\n            Notification.exception(ex);\n        }).bind(this));\n    };\n\n    /**\n     * Update sections settings\n     * @param  {int}    instanceid Section instance id\n     * @param  {string} formdata   Serialized section form data\n     */\n    SectionManager.prototype.updateSection = function(instanceid, formdata) {\n        this.showSectionLoader(instanceid, true);\n        Ajax.call([\n        {\n            methodname: 'local_remuihomepage_update_section_instance',\n            args: {instanceid: instanceid, jsonformdata: formdata},\n            done: (function(response) {\n                Notice.success(M.util.get_string('sectionupdated', 'local_remuihomepage'), 4000);\n                this.reloadSection(response, null);\n            }).bind(this),\n        fail: (function(ex) {\n                this.showSectionLoader(instanceid, false);\n                Notification.exception(ex);\n        }).bind(this)\n        }\n        ]);\n    };\n\n    /**\n     * Enable deletion timer or cancel it\n     * @param  {Number}  id     Section id\n     * @param  {Boolean} action true to start timer, false to clear timer\n     */\n    SectionManager.prototype.deletionTimer = function(id, action) {\n        // If user cancel deletion then clear timer.\n        if (action == false) {\n            clearInterval(sectionDeletion[id]);\n        }\n        var section = this.getSectionElement(false);\n        var timer = $(section).find('.cancel-delete-section .section-deletion-timer');\n\n        // Set section deletion timer.\n        sectionDeletion[id] = setInterval((function() {\n            var time = parseInt($(timer).text()) - 1;\n            $(timer).text(time);\n\n            // If time is 0 then clear timer and remove section.\n            if (time == 0) {\n                clearInterval(sectionDeletion[id]);\n                $(section).remove();\n                this.saveSectionsOrder();\n                $('body').trigger('scroll');\n            }\n        }).bind(this), 1000);\n    };\n\n    /**\n     * Mark section instance as deleted or undo deletion\n     * @param  {Number}  id      section id\n     * @param  {Boolean|Number}  action Deletion action false to cancel, true to mark as delete. 2 if confirm deletion\n     */\n    SectionManager.prototype.deleteInstance = function(id, action) {\n        this.showSectionLoader(id, true);\n        this.setInstanceid(id);\n\n        // Clear timer and delete section from dom when admin confirm form deletion.\n        if (action == 2) {\n            this.deletionTimer(id, false);\n            this.getSectionElement(false).remove();\n            this.saveSectionsOrder();\n            $('body').trigger('scroll');\n            return;\n        }\n\n        if (action == true) {\n            Notice.success(M.util.get_string('sectiondeleted', 'local_remuihomepage'), 4000);\n        }\n\n        Ajax.call([\n        {\n            methodname: 'local_remuihomepage_delete_section_instance',\n            args: {instanceid: id, action: action},\n            done: (function(response) {\n                this.reloadSection(response, (function() {\n\n                    // Start deletion timer.\n                    this.deletionTimer(id, action);\n                }).bind(this));\n                this.saveSectionsOrder();\n            }).bind(this),\n        fail: (function(ex) {\n                this.showSectionLoader(id, false);\n                Notification.exception(ex);\n        }).bind(this)\n        }\n        ]);\n    };\n\n    /**\n     * Get sections order\n     */\n    SectionManager.prototype.getSectionsOrder = function() {\n        let sections = $('body').find('section[data-instance]');\n        let order = [];\n        sections.each(function(index, section) {\n            if ($(section).find('.section-delete-overlay')) {\n                order.push($(section).data('instance'));\n            }\n        });\n        return order;\n    };\n\n    /**\n     * Save order of section in user preference\n     */\n    SectionManager.prototype.saveSectionsOrder = function() {\n        if (transparentheader) {\n            $('body').toggleClass('has-slider animate-header', $('body').find('section[data-instance]:first-child').is('.section-slider'));\n        }\n        let order = this.getSectionsOrder();\n        return Ajax.call([{\n            methodname: 'local_remuihomepage_save_sections_order',\n            args: {\n                order\n            }\n        }])[0];\n    };\n\n    /**\n     * Reorder the section eigther up or down\n     * @param  {int} instanceid Section instanceid\n     * @param  {int} move       Direction(1 for down, -1 for up)\n     */\n    SectionManager.prototype.reorderSection = function(instanceid, move, saveorder) {\n        this.setInstanceid(instanceid);\n        let section = $(SECTIONSELECTOR);\n        if (move == -1 && !section.is(':first-child')) {// Move upside.\n            section.prev().insertAfter(section);\n        } else if(move == 1 && !section.is(':last-child')) {// Move downside.\n            section.next().insertBefore(section);\n        } else {\n            return;\n        }\n        if (saveorder == false) {\n            return;\n        }\n        this.saveSectionsOrder().fail((function(ex) {\n            Notification.exception(ex);\n            this.reorderSection(instanceid, move * -1, false);\n        }).bind(this));\n    };\n\n    /**\n     * Update visibility of section\n     * @param  {Number}  instanceid Section instance id\n     * @param  {Boolean} visible    Section visibility\n     */\n    SectionManager.prototype.updateVisibility = function(instanceid, visible) {\n        var visibilityButton = this.getSectionElement(instanceid).find('button.section-visibility');\n        Ajax.call([\n        {\n            methodname: 'local_remuihomepage_update_section_visibility',\n            args: {\n                id: instanceid,\n                visible: visible\n            },\n            done: (function(response) {\n                $(visibilityButton).data('visible', visible);\n                $(visibilityButton).find('.icon').toggleClass('fa-eye', visible);\n                $(visibilityButton).find('.icon').toggleClass('fa-eye-slash', !visible);\n                if(visible){\n                    $(visibilityButton).attr(\"title\", 'Hide');\n                    $(visibilityButton).find('.icon').attr(\"title\", 'Hide');\n                } else {\n                    $(visibilityButton).attr(\"title\", 'Show');\n                    $(visibilityButton).find('.icon').attr(\"title\", 'Show');\n                }\n            }).bind(this),\n        fail: Notification.exception\n        }\n        ]);\n    };\n\n    var SECTIONMANAGER = new SectionManager();\n\n    return SECTIONMANAGER;\n});\n"],"file":"sectionmanager.min.js"}