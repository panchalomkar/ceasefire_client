{"version":3,"sources":["task.js"],"names":["define","$","ajax","Notification","Templates","ModalFactory","ModalEvents","Fragment","ModalTaskPopup","RemuiblckEvents","TaskFilters","TaskView","SELECTORS","PROMISES","settings","call","methodname","args","taskid","status","id","type","FRAGMENTS","loadFragment","contextid","closeTaskPopup","modal","hide","destroy","deleteTask","root","taskModal","subject","task","find","text","getSubject","create","types","SAVE_CANCEL","title","M","util","get_string","body","done","setSaveButtonText","getRoot","on","save","response","loadTasks","position","message","length","append","newToast","setTimeout","addClass","removeClass","remove","toast","exception","name","msg","fail","cancel","show","taskPopup","TYPE","templateContext","new","setBody","hidden","TASK_SAVE","valid_settings","saving","get_task_settings","ex","notify","callback","arguments","undefined","notifyUsers","TASK_DELETE","TASK_CANCEL","getTaskDuration","getTaskStatus","initialiseEvents","e","target","is","toggleTaskProcessing","prop","completeTask","this","data","parent","init","document","ready","button","detach","panelHeading","closest","panelActions","prepend","taskProcessing","updateContainers"],"mappings":"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","sourcesContent":["define([\n    'jquery',\n    'core/ajax',\n    'core/notification',\n    'core/templates',\n    'core/modal_factory',\n    'core/modal_events',\n    'core/fragment',\n    'block_remuiblck/modal_task_popup',\n    'block_remuiblck/events',\n    'block_remuiblck/task_filters',\n    'block_remuiblck/task_view'\n], function(\n    $,\n    ajax,\n    Notification,\n    Templates,\n    ModalFactory,\n    ModalEvents,\n    Fragment,\n    ModalTaskPopup,\n    RemuiblckEvents,\n    TaskFilters,\n    TaskView\n) {\n    var SELECTORS = {\n        ADD_TASK: '[data-region=\"add-task\"]',\n        TASK: '[data-region=\"task-item\"]',\n        TASK_SUBJECT: '[data-toggle=\"collapse\"]',\n        TASK_EDIT: '[data-action=\"edit\"]',\n        TASK_POPUP: \"[data-region='task-body']\",\n        TASK_DURATION_FILTER: '[data-region=\"task-duration-filter\"]',\n        TASK_STATUS_FILTER: '[data-region=\"task-status-filter\"]',\n        TASK_FILTER_OPTION: '[data-value]',\n        TASK_SUBJECT: '.item-title .panel-heading span',\n        PANEL: '.panel',\n        PANEL_HEADING: '.panel-heading',\n        PANEL_ACTIONS: 'panel-actions',\n        TOASTER_CONTAINER: '[aria-task-toasters]',\n        TOASTER_CONTAINER_ID: 'aria-task-toasters',\n        TASK_PROCESSING: '.block-processing',\n    };\n\n    var PROMISES = {\n        /**\n         * Create new task promise call\n         * @param  object   settings task settings object\n         * @return promise           ajax promise\n         */\n        CREATE_NEW_TASK: function(settings) {\n            return ajax.call([{\n                methodname: 'block_remuiblck_create_new_task',\n                args: settings\n            }])[0];\n        },\n\n        /**\n         * Edit task settings promise call\n         * @param  object   settings task settings object\n         * @return promise           ajax promise\n         */\n        EDIT_TASK: function(settings) {\n            return ajax.call([{\n                methodname: 'block_remuiblck_edit_task',\n                args: settings\n            }])[0];\n        },\n\n        /**\n         * Toggle task completion promise call\n         * @param  int     taskid id of task\n         * @param  bool    status true for completed and false for incomplete\n         * @return promise        ajax promise\n         */\n        COMPLETE_TASK: function(taskid, status) {\n            return ajax.call([{\n                methodname: 'block_remuiblck_complete_task',\n                args: {\n                    id: taskid,\n                    status: status\n                }\n            }])[0];\n        },\n\n        /**\n         * Delete existing task\n         * @param  int     taskid task id\n         * @return promise        ajax promise\n         */\n        DELETE_TASK: function(taskid) {\n            return ajax.call([{\n                methodname: 'block_remuiblck_delete_task',\n                args: {\n                    id: taskid\n                }\n            }])[0];\n        },\n\n        /**\n         * Notify users about task\n         * @param int      taskid task id\n         * @param string   type   type of notification from one of these [create|complete|incomplete]\n         * @return promise        ajax promise\n         */\n        NOTIFY_USERS: function(taskid, type) {\n            return ajax.call([{\n                methodname: 'block_remuiblck_task_notify_users',\n                args: {\n                    id: taskid,\n                    type: type\n                }\n            }])[0];\n        }\n    };\n    var FRAGMENTS = {\n        /**\n         * Fetch task form fragment call\n         * @param  int     taskid task id\n         * @return promise        fragment promise call\n         */\n        GET_TASK_FORM: function(taskid) {\n            return Fragment.loadFragment(\n                'block_remuiblck',\n                'task_form',\n                contextid,\n                {\n                    taskid: taskid\n                }\n            );\n        }\n    }\n\n    /**\n     * Close task popup modal\n     * @param ModalFactory modal modal factory object\n     */\n    var closeTaskPopup = function(modal) {\n        modal.hide();\n        modal.destroy();\n    };\n\n    /**\n     * Get subject of task on the basis of id\n     * It check whether task is present in task list\n     * @param  {string} root   root container id\n     * @param  {[type]} taskid task id\n     * @return {string}        task subject\n     */\n    var getSubject = function(root, taskid) {\n        let task = $(root).find(SELECTORS.TASK+'[data-id=\"'+taskid+'\"]');\n        if (task) {\n            return task.find(SELECTORS.TASK_SUBJECT).text();\n        }\n        return taskid;\n    }\n\n    /**\n     * Show toaster\n     * @param  {string} root     root container id\n     * @param  {[type]} position position of toaster\n     * @param  {[type]} type     type of toaster\n     * @param  {[type]} message  message to show in toater\n     */\n    var toast = function(root, position, type, message) {\n        if ($(root).find('.'+position+SELECTORS.TOASTER_CONTAINER).length == 0) {\n            $(root).append('<div class=\"toaster '+position+'\"'+SELECTORS.TOASTER_CONTAINER_ID+'role=\"alert\"></div>');\n        }\n        let newToast = $('<div class=\"toast toast-just-text '+type+' toast-shadow\"><div class=\"toast-message\">'+message+'</div></div>');\n        $(root).find(SELECTORS.TOASTER_CONTAINER).append(newToast);\n        setTimeout(function() {\n            newToast.addClass('show');\n        }, 0);\n        setTimeout(function() {\n            newToast.removeClass('show');\n            setTimeout(function() {\n                newToast.remove();\n            }, 250);\n        }, 2000);\n    }\n\n    /**\n     * Delete task\n     * @param string root   block root selector\n     * @param int    taskid id of task\n     */\n    var deleteTask = function(root, taskid, taskModal) {\n        let subject = getSubject(root, taskid);\n        ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: M.util.get_string('deletetask', 'block_remuiblck'),\n            body: M.util.get_string('deletetaskmessage', 'block_remuiblck', subject)\n        }, $('#create'))\n        .done(function(modal) {\n            modal.setSaveButtonText(M.util.get_string('ok', 'moodle'));\n            modal.getRoot().on(ModalEvents.save, function() {\n                PROMISES.DELETE_TASK(taskid).done(function(response) {\n                    if (response.status == true) {\n                        closeTaskPopup(modal);\n                        closeTaskPopup(taskModal);\n                        loadTasks(root);\n                        toast(root, 'toast-top-center', 'toast-error', M.util.get_string('taskdeleted', 'block_remuiblck', subject));\n                        return;\n                    }\n                    Notification.exception({\n                        name: response.msg\n                    });\n                }).fail(Notification.exception);\n            }).on(ModalEvents.cancel, function() {\n                closeTaskPopup(modal);\n            });\n            modal.show();\n        })\n        .fail(Notification.exception);\n    };\n\n    /**\n     * Notify users about task. This call ajax request\n     * @param int      taskid   task id\n     * @param string   type     type of notification from one of these [create|complete|incomplete]\n     * @param function callback call to execute after notify completion\n     */\n    var notifyUsers = function(taskid, type) {\n        var callback = arguments.length > 1 && arguments[2] !== undefined ? arguments[2] : null;\n        PROMISES.NOTIFY_USERS(taskid, type).done(callback).fail(function(ex) {\n            Notification.exception(ex);\n            if (callback != null) {\n                callback();\n            }\n        });\n    };\n\n    /**\n     * Open task popup for creating new task editing existing\n     * @param DOM root   block DOM object\n     * @param int taskid task id. -1 if new task\n     */\n    var taskPopup = function(root, taskid) {\n        ModalFactory.create(\n            {\n                type: ModalTaskPopup.TYPE,\n                templateContext: {\n                    new: taskid == -1\n                }\n            },\n            $('#create')\n        ).done(function(modal) {\n            modal.show();\n            modal.setBody(FRAGMENTS.GET_TASK_FORM(taskid));\n            modal.getRoot().on(ModalEvents.hidden, function() {\n\n                // Handle modal close event\n                closeTaskPopup(modal);\n            }).on(RemuiblckEvents.TASK_SAVE, function() {\n\n                if (!modal.valid_settings()) {\n                    return;\n                }\n                modal.saving();\n                // Handle task save event\n                let settings = modal.get_task_settings();\n                if (taskid == -1) {\n                    PROMISES.CREATE_NEW_TASK(settings).done(function(response) {\n                        if (settings.notify == true) {\n                            notifyUsers(response, 'create', function() {\n                                closeTaskPopup(modal);\n                                loadTasks(root);\n                            });\n                            return;\n                        }\n                        closeTaskPopup(modal);\n                        loadTasks(root);\n                    }).fail(function(ex) {\n                        modal.saving(false);\n                        Notification.exception(ex);\n                    });\n                    return;\n                }\n                settings.id = taskid;\n                PROMISES.EDIT_TASK(settings).done(function(response) {\n                    closeTaskPopup(modal);\n                    loadTasks(root);\n                }).fail(function(ex) {\n                    modal.saving(false);\n                    Notification.exception(ex);\n                });\n            }).on(RemuiblckEvents.TASK_DELETE, function() {\n\n                // Handle task delete event\n                deleteTask(root, taskid, modal);\n            }).on(RemuiblckEvents.TASK_CANCEL, function() {\n\n                // Handle task cancel event\n                closeTaskPopup(modal);\n            });\n        });\n    };\n\n    /**\n     * Load tasks in task list\n     * @param DOM root block DOM object\n     */\n    var loadTasks = function(root) {\n        TaskView.loadTasks(root, TaskFilters.getTaskDuration(root), TaskFilters.getTaskStatus(root));\n    };\n\n    /**\n     * Toggle task completion\n     * @param string root   block root selector\n     * @param int    taskid id of task\n     * @param bool   status true for completed and false for incomplete\n     */\n    var completeTask = function(root, taskid, status) {\n        TaskView.toggleTaskProcessing(root, true);\n        PROMISES.COMPLETE_TASK(taskid, status).done(function(response) {\n            if (response.status == true) {\n                loadTasks(root);\n                return;\n            }\n            $(root + ' ' + SELECTORS.TASK + '[data-id=\"'+taskid+'\"]').find('input').prop('checked', !status);\n            Notification.exception({\n                name: response.msg\n            });\n            TaskView.toggleTaskProcessing(root);\n        }).fail(function(ex) {\n            Notification.exception(ex);\n            $(root + ' ' + SELECTORS.TASK + '[data-id=\"'+taskid+'\"]').find('input').prop('checked', !status);\n            TaskView.toggleTaskProcessing(root);\n        });\n    };\n\n\n    /**\n     * Initialise dom events\n     * @param DOM root block DOM object\n     */\n    var initialiseEvents = function(root) {\n        $('body').on('click', SELECTORS.ADD_TASK, function() {\n            taskPopup(root, -1);\n        }).on('click', root + ' ' + SELECTORS.TASK, function(e) {\n            if ($(e.target).is('input')) {\n                completeTask(root, $(this).data('id'), $(e.target).is(':checked'));\n                return;\n            }\n            if ($(e.target).is(SELECTORS.TASK_SUBJECT)) {\n                return;\n            }\n            if ($(e.target).is(SELECTORS.TASK_EDIT) || $(e.target).parent().is(SELECTORS.TASK_EDIT)) {\n                taskPopup(root, $(this).data('id'));\n            }\n        });\n    };\n\n    var updateContainers = function(root) {\n        // Move add button panel heading\n        let button = $(root).find(SELECTORS.ADD_TASK).detach();\n        let panelHeading = $(root).closest(SELECTORS.PANEL).find(SELECTORS.PANEL_HEADING);\n        let panelActions = $(panelHeading).find('.' + SELECTORS.PANEL_ACTIONS);\n        if (panelActions.length == 0) {\n            panelActions = $('<div class=\"' + SELECTORS.PANEL_ACTIONS + '\"></div>');\n            panelHeading.prepend(panelActions);\n        }\n        panelActions.prepend(button);\n        button.removeClass('d-none');\n\n        let taskProcessing = $(root).find(SELECTORS.TASK_PROCESSING).detach();\n        let panel = $(panelHeading).parent(SELECTORS.PANEL);\n        panel.prepend(taskProcessing);\n    };\n\n    /**\n     * Initialise tasks\n     * @param DOM root block DOM object\n     */\n    var init = function(root) {\n        $(document).ready(function() {\n            initialiseEvents(root);\n            updateContainers(root);\n        });\n        TaskView.init(root);\n        TaskFilters.init(root);\n    };\n    return {\n        init: init\n    };\n});\n"],"file":"task.min.js"}