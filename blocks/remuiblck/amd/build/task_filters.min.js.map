{"version":3,"sources":["task_filters.js"],"names":["define","$","CustomEvents","Notification","RemuiblckEvents","TaskView","SELECTORS","getTaskDuration","root","find","data","getTaskStatus","getTaskSearch","val","init","taskDurationFilterContainer","events","activate","on","e","option","target","closest","hasClass","originalEvent","preventDefault","trigger","TASK_DURATION_FILTER_CHANGE","loadTasks","registerTaskDurationFilter","taskStatusFilterContainer","TASK_STATUS_FILTER_CHANGE","registerTaskStatusFilter","TASK_SEARCH_FILTER_CHANGE","this","registerTaskSearchFilter"],"mappings":"AAAAA,OAAO,CACH,SACA,iCACA,oBACA,yBACA,6BACD,SACCC,EACAC,EACAC,EACAC,EACAC,GAEA,IAAIC,EACsB,uCADtBA,EAEoB,qCAFpBA,EAGoB,qCAHpBA,EAIoB,gCAJpBA,EAKoB,eAsCpBC,EAAkB,SAASC,GAC3B,OAAOP,EAAEO,GAAMC,KAAKH,GAAgCG,KAAKH,EAA+B,WAAWI,KAAK,UAsCxGC,EAAgB,SAASH,GACzB,OAAOP,EAAEO,GAAMC,KAAKH,GAA8BG,KAAKH,EAA+B,WAAWI,KAAK,UAuBtGE,EAAgB,SAASJ,GACzB,OAAOP,EAAEO,GAAMC,KAAKH,GAA8BO,OAiBtD,MAAO,CACHC,KAXO,SAASN,IArGa,SAASA,GACtC,IAAIO,EAA8Bd,EAAEO,GAAMC,KAAKH,GAC/CJ,EAAaF,OAAOe,EAA6B,CAACb,EAAac,OAAOC,WACtEF,EAA4BG,GACxBhB,EAAac,OAAOC,SACpBX,EACA,SAASa,EAAGT,GAER,IAAIU,EAASnB,EAAEkB,EAAEE,QAAQC,QAAQhB,GAE7Bc,EAAOG,SAAS,UAEhBb,EAAKc,cAAcC,kBAIvBxB,EAAEkB,EAAEE,QAAQK,QAAQtB,EAAgBuB,6BAEpCjB,EAAKc,cAAcC,iBAEnBpB,EAASuB,UAAUpB,EAAMY,EAAOV,KAAK,SAAUC,EAAcH,GAAOI,EAAcJ,OAkF1FqB,CAA2BrB,GA/DA,SAASA,GACpC,IAAIsB,EAA4B7B,EAAEO,GAAMC,KAAKH,GAC7CJ,EAAaF,OAAO8B,EAA2B,CAAC5B,EAAac,OAAOC,WACpEa,EAA0BZ,GACtBhB,EAAac,OAAOC,SACpBX,EACA,SAASa,EAAGT,GAER,IAAIU,EAASnB,EAAEkB,EAAEE,QAAQC,QAAQhB,GAE7Bc,EAAOG,SAAS,UAEhBb,EAAKc,cAAcC,kBAIvBxB,EAAEkB,EAAEE,QAAQK,QAAQtB,EAAgB2B,2BAEpCrB,EAAKc,cAAcC,iBAEnBpB,EAASuB,UAAUpB,EAAMD,EAAgBC,GAAOY,EAAOV,KAAK,SAAUE,EAAcJ,OA4C5FwB,CAAyBxB,GAzBE,SAASA,GACJP,EAAEO,GAAMC,KAAKH,GACnBY,GACtBd,EAAgB6B,0BAChB,SAASd,EAAGT,GACRL,EAASuB,UAAUpB,EAAMD,EAAgBC,GAAOG,EAAcH,GAAOP,EAAEiC,MAAMrB,SAqBrFsB,CAAyB3B,GACzBP,EAAE,QAAQiB,GAAG,QAASZ,EAA8B,SAASa,GACzDA,EAAEM,iBACFxB,EAAEO,GAAMC,KAAKH,GAA8BO,IAAI,IAAIa,QAAQ,YAM/DnB,gBAAiBA,EACjBI,cAAeA","sourcesContent":["define([\n    'jquery',\n    'core/custom_interaction_events',\n    'core/notification',\n    'block_remuiblck/events',\n    'block_remuiblck/task_view'\n], function(\n    $,\n    CustomEvents,\n    Notification,\n    RemuiblckEvents,\n    TaskView\n) {\n    var SELECTORS = {\n        TASK_DURATION_FILTER: '[data-region=\"task-duration-filter\"]',\n        TASK_STATUS_FILTER: '[data-region=\"task-status-filter\"]',\n        TASK_SEARCH_FILTER: '[data-region=\"task-search-filter\"]',\n        TASK_CANCEL_SEARCH: '[data-region=\"cancel-result\"]',\n        TASK_FILTER_OPTION: '[data-value]'\n    };\n\n    /**\n     * Event listener for the day selector (\"Next 7 days\", \"Next 30 days\", etc).\n     *\n     * @param {object} root The root element for the timeline block\n     */\n    var registerTaskDurationFilter = function(root) {\n        var taskDurationFilterContainer = $(root).find(SELECTORS.TASK_DURATION_FILTER);\n        CustomEvents.define(taskDurationFilterContainer, [CustomEvents.events.activate]);\n        taskDurationFilterContainer.on(\n            CustomEvents.events.activate,\n            SELECTORS.TASK_FILTER_OPTION,\n            function(e, data) {\n\n                var option = $(e.target).closest(SELECTORS.TASK_FILTER_OPTION);\n\n                if (option.hasClass('active')) {\n                    // If it's already active then we don't need to do anything.\n                    data.originalEvent.preventDefault();\n                    return;\n                }\n\n                $(e.target).trigger(RemuiblckEvents.TASK_DURATION_FILTER_CHANGE);\n\n                data.originalEvent.preventDefault();\n\n                TaskView.loadTasks(root, option.data('value'), getTaskStatus(root), getTaskSearch(root));\n            }\n        );\n    };\n\n    /**\n     * Get task duration dropdown selection\n     * @param  DOM    root block DOM object\n     * @return string      selected duration option\n     */\n    var getTaskDuration = function(root) {\n        return $(root).find(SELECTORS.TASK_DURATION_FILTER).find(SELECTORS.TASK_FILTER_OPTION + '.active').data('value');\n    }\n\n    /**\n     * Event listener for the day selector (\"Next 7 days\", \"Next 30 days\", etc).\n     *\n     * @param {object} root The root element for the timeline block\n     */\n    var registerTaskStatusFilter = function(root) {\n        var taskStatusFilterContainer = $(root).find(SELECTORS.TASK_STATUS_FILTER);\n        CustomEvents.define(taskStatusFilterContainer, [CustomEvents.events.activate]);\n        taskStatusFilterContainer.on(\n            CustomEvents.events.activate,\n            SELECTORS.TASK_FILTER_OPTION,\n            function(e, data) {\n\n                var option = $(e.target).closest(SELECTORS.TASK_FILTER_OPTION);\n\n                if (option.hasClass('active')) {\n                    // If it's already active then we don't need to do anything.\n                    data.originalEvent.preventDefault();\n                    return;\n                }\n\n                $(e.target).trigger(RemuiblckEvents.TASK_STATUS_FILTER_CHANGE);\n\n                data.originalEvent.preventDefault();\n\n                TaskView.loadTasks(root, getTaskDuration(root), option.data('value'), getTaskSearch(root));\n            }\n        );\n    };\n\n    /**\n     * Get task status dropdown selection\n     * @param DOM     root block DOM object\n     * @return string      selected status option\n     */\n    var getTaskStatus = function(root) {\n        return $(root).find(SELECTORS.TASK_STATUS_FILTER).find(SELECTORS.TASK_FILTER_OPTION + '.active').data('value');\n    }\n\n    /**\n     * Event listener for the search input\n     *\n     * @param {object} root The root element for the timeline block\n     */\n    var registerTaskSearchFilter = function(root) {\n        var taskSearchFilterContainer = $(root).find(SELECTORS.TASK_SEARCH_FILTER);\n        taskSearchFilterContainer.on(\n            RemuiblckEvents.TASK_SEARCH_FILTER_CHANGE,\n            function(e, data) {\n                TaskView.loadTasks(root, getTaskDuration(root), getTaskStatus(root), $(this).val());\n            }\n        );\n    };\n\n    /**\n     * Get task search input\n     * @param DOM     root block DOM object\n     * @return string      search query\n     */\n    var getTaskSearch = function(root) {\n        return $(root).find(SELECTORS.TASK_SEARCH_FILTER).val();\n    }\n\n    /**\n     * Initialise task filters events\n     * @param DOM root block DOM object\n     */\n    var init = function(root) {\n        registerTaskDurationFilter(root);\n        registerTaskStatusFilter(root);\n        registerTaskSearchFilter(root);\n        $('body').on('click', SELECTORS.TASK_CANCEL_SEARCH, function(e) {\n            e.preventDefault();\n            $(root).find(SELECTORS.TASK_SEARCH_FILTER).val('').trigger('input');\n            return;\n        });\n    };\n    return {\n        init: init,\n        getTaskDuration: getTaskDuration,\n        getTaskStatus: getTaskStatus\n    };\n});\n"],"file":"task_filters.min.js"}