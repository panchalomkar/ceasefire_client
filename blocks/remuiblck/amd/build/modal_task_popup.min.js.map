{"version":3,"sources":["modal_task_popup.js"],"names":["define","$","Notification","CustomEvents","Modal","ModalRegistry","RemuiblckEvents","registered","SELECTORS","TASK","root","call","this","getFooter","find","length","exception","message","M","util","get_string","TYPE","prototype","Object","create","constructor","registerEventListeners","_this","getModal","on","events","activate","e","data","trigger","TASK_SAVE","bind","TASK_DELETE","TASK_CANCEL","valid_settings","valid","val","dispatchEvent","CustomEvent","get_task_settings","subject","summary","timedue","modal","datetime","Date","getTime","get_date","visible","is","notify","users","saving","action","arguments","undefined","button","text","attr","removeAttr","register"],"mappings":"AAAAA,OAAO,CACH,SACA,oBACA,iCACA,aACA,sBACA,0BACD,SACCC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,IAAIC,GAAa,EACbC,EACa,uBADbA,EAEe,yBAFfA,EAGe,yBAHfA,EAIS,mBAJTA,EAKS,mBALTA,EAMK,oBANLA,EAOO,sBAPPA,EAQM,qBARNA,EASS,mBATTA,EAUQ,kBAVRA,EAWO,sBAUPC,EAAO,SAASC,GAChBN,EAAMO,KAAKC,KAAMF,GAEZE,KAAKC,YAAYC,KAAKN,GAAuBO,QAC9Cb,EAAac,UAAU,CAACC,QAASC,EAAEC,KAAKC,WAAW,eAAgB,sBAiG3E,OA5FAX,EAAKY,KAAO,wBACZZ,EAAKa,UAAYC,OAAOC,OAAOpB,EAAMkB,YACtBG,YAAchB,EAO7BA,EAAKa,UAAUI,uBAAyB,WAEpCtB,EAAMkB,UAAUI,uBAAuBf,KAAKC,MAC5C,IAAIe,EAAQf,KACZA,KAAKgB,WAAWC,GAAG1B,EAAa2B,OAAOC,SAAUvB,EAAuB,SAASwB,EAAGC,GAGhFN,EAAMC,WAAWM,QAAQ5B,EAAgB6B,YAC3CC,KAAKxB,OAEPA,KAAKgB,WAAWC,GAAG1B,EAAa2B,OAAOC,SAAUvB,EAAyB,SAASwB,EAAGC,GAElFN,EAAMC,WAAWM,QAAQ5B,EAAgB+B,cAC3CD,KAAKxB,OAEPA,KAAKgB,WAAWC,GAAG1B,EAAa2B,OAAOC,SAAUvB,EAAyB,SAASwB,EAAGC,GAElFN,EAAMC,WAAWM,QAAQ5B,EAAgBgC,cAC3CF,KAAKxB,QAQXH,EAAKa,UAAUiB,eAAiB,WAC5B,IAAIC,GAAQ,EAIZ,OAFAA,EAAmB,IADL5B,KAAKgB,WAAWd,KAAKN,GAAmBiC,MAEtD7B,KAAKgB,WAAWd,KAAKN,GAAmB,GAAGkC,cAAc,IAAIC,YAAY,SAClEH,GAQX/B,EAAKa,UAAUsB,kBAAoB,WAgB/B,MARgB,CACZC,QAASjC,KAAKgB,WAAWd,KAAKN,GAAmBiC,MACjDK,QAASlC,KAAKgB,WAAWd,KAAKN,GAAmBiC,MACjDM,QAVW,SAASC,GACpB,IAAIC,EAAWD,EAAMlC,KAAKN,GAAgBiC,MAI1C,OAHAQ,GAAY,IAAMD,EAAMlC,KAAKN,GAAiBiC,MAC9CQ,GAAY,IAAMD,EAAMlC,KAAKN,GAAeiC,MAC5CQ,GAAY,YACL,IAAKC,KAAKD,GAAWE,UAAU,IAK7BC,CAASxC,KAAKgB,YACvByB,QAASzC,KAAKgB,WAAWd,KAAKN,GAAmB8C,GAAG,YACpDC,OAAQ3C,KAAKgB,WAAWd,KAAKN,GAAkB8C,GAAG,YAClDE,MAAO5C,KAAKgB,WAAWd,KAAKN,GAAiBiC,QASrDhC,EAAKa,UAAUmC,OAAS,WAEpB,IAAIC,IAASC,UAAU5C,OAAS,QAAsB6C,IAAjBD,UAAU,KAAmBA,UAAU,GAE5E,IAAIE,EAASjD,KAAKgB,WAAWd,KAAKN,GAClC,GAAc,GAAVkD,EAGA,OAFAG,EAAOC,KAAK5C,EAAEC,KAAKC,WAAW,SAAU,oBAAoB2C,KAAK,WAAY,iBAC7EF,EAAOE,KAAK,YAAY,GAG5BF,EAAOE,KAAK,YAAY,GACxBF,EAAOC,KAAK5C,EAAEC,KAAKC,WAAW,OAAQ,oBAAoB4C,WAAW,aAKpEzD,IACDF,EAAc4D,SAASxD,EAAKY,KAAMZ,EAAM,oCACxCF,GAAa,GAGVE","sourcesContent":["define([\n    'jquery',\n    'core/notification',\n    'core/custom_interaction_events',\n    'core/modal',\n    'core/modal_registry',\n    'block_remuiblck/events'\n], function(\n    $,\n    Notification,\n    CustomEvents,\n    Modal,\n    ModalRegistry,\n    RemuiblckEvents\n) {\n    var registered = false;\n    var SELECTORS = {\n        SAVE_BUTTON: '[data-action=\"save\"]',\n        DELETE_BUTTON: '[data-action=\"delete\"]',\n        CANCEL_BUTTON: '[data-action=\"cancel\"]',\n        SUBJECT: '[name=\"subject\"]',\n        SUMMARY: '[name=\"summary\"]',\n        DAY: '[name=\"due[day]\"]',\n        MONTH: '[name=\"due[month]\"]',\n        YEAR: '[name=\"due[year]\"]',\n        VISIBLE: '[name=\"visible\"]',\n        NOTIFY: '[name=\"notify\"]',\n        USERS: '[name=\"userlist[]\"]',\n        ELEMENT_ROW: '.fitem',\n        ERROR_FEEDBACK: '.form-control-feedback'\n    };\n\n    /**\n     * Constructor for the Modal.\n     *\n     * @param {object} root The root jQuery element for the modal\n     */\n    var TASK = function(root) {\n        Modal.call(this, root);\n\n        if (!this.getFooter().find(SELECTORS.SAVE_BUTTON).length) {\n            Notification.exception({message: M.util.get_string('nosavebutton', 'block_remuiblck')});\n        }\n\n    };\n\n    TASK.TYPE = 'block_remuiblck-task';\n    TASK.prototype = Object.create(Modal.prototype);\n    TASK.prototype.constructor = TASK;\n\n    /**\n     * Set up all of the event handling for the modal.\n     *\n     * @method registerEventListeners\n     */\n    TASK.prototype.registerEventListeners = function() {\n        // Apply parent event listeners.\n        Modal.prototype.registerEventListeners.call(this);\n        let _this = this;\n        this.getModal().on(CustomEvents.events.activate, SELECTORS.SAVE_BUTTON, function(e, data) {\n            // Add your logic for when the save button is clicked. This could include the form validation,\n            // loading animations, error handling etc.\n            _this.getModal().trigger(RemuiblckEvents.TASK_SAVE);\n        }.bind(this));\n\n        this.getModal().on(CustomEvents.events.activate, SELECTORS.DELETE_BUTTON, function(e, data) {\n            // Add your logic for when the delete button is clicked.\n            _this.getModal().trigger(RemuiblckEvents.TASK_DELETE);\n        }.bind(this));\n\n        this.getModal().on(CustomEvents.events.activate, SELECTORS.CANCEL_BUTTON, function(e, data) {\n            // Add your logic for when the delete button is clicked.\n            _this.getModal().trigger(RemuiblckEvents.TASK_CANCEL);\n        }.bind(this));\n\n    };\n\n    /**\n     * Check whether settings are valid or not\n     * @return {bool} True if valid\n     */\n    TASK.prototype.valid_settings = function() {\n        let valid = true;\n        let subject = this.getModal().find(SELECTORS.SUBJECT).val();\n        valid = subject != '';\n        this.getModal().find(SELECTORS.SUBJECT)[0].dispatchEvent(new CustomEvent('blur'));\n        return valid;\n    };\n\n\n    /**\n     * Get settings entered in task form\n     * @return object task settings object\n     */\n    TASK.prototype.get_task_settings = function() {\n        var get_date = function(modal) {\n            let datetime = modal.find(SELECTORS.YEAR).val();\n            datetime += '-' + modal.find(SELECTORS.MONTH).val();\n            datetime += '-' + modal.find(SELECTORS.DAY).val();\n            datetime += ' 23:59:59';\n            return (new Date(datetime)).getTime()/1000;\n        }\n        let settings =  {\n            subject: this.getModal().find(SELECTORS.SUBJECT).val(),\n            summary: this.getModal().find(SELECTORS.SUMMARY).val(),\n            timedue: get_date(this.getModal()),\n            visible: this.getModal().find(SELECTORS.VISIBLE).is(':checked'),\n            notify: this.getModal().find(SELECTORS.NOTIFY).is(':checked'),\n            users: this.getModal().find(SELECTORS.USERS).val()\n        };\n        return settings;\n    }\n\n    /**\n     * Change saving button status\n     * @param  {Boolean} action true is saving form details false if not\n     */\n    TASK.prototype.saving = function() {\n\n        var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n        let button = this.getModal().find(SELECTORS.SAVE_BUTTON);\n        if (action == true) {\n            button.text(M.util.get_string('saving', 'core_repository')).attr('disabled', 'disabled');\n            button.attr('disabled', true);\n            return;\n        }\n        button.attr('disabled', false);\n        button.text(M.util.get_string('save', 'core_repository')).removeAttr('disabled');\n    }\n\n    // Automatically register with the modal registry the first time this module is imported so that you can create modals\n    // of this type using the modal factory.\n    if (!registered) {\n        ModalRegistry.register(TASK.TYPE, TASK, 'block_remuiblck/modal_task_popup');\n        registered = true;\n    }\n\n    return TASK;\n});\n"],"file":"modal_task_popup.min.js"}