{"version":3,"sources":["task_view.js"],"names":["define","$","ajax","Notification","Templates","ModalFactory","ModalEvents","Fragment","ModalTaskPopup","RemuiblckEvents","SELECTORS","TEMPLATES","PROMISES","duration","status","search","call","methodname","args","loadTasks","root","arguments","length","undefined","done","response","tasks","no_tasks_image","M","util","image_url","render","html","find","toggleTaskProcessing","fail","ex","exception","show","parents","toggleClass","init"],"mappings":"AAAAA,OAAO,CACH,SACA,YACA,oBACA,iBACA,qBACA,oBACA,gBACA,mCACA,0BACD,SACCC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,IAAIC,EACgB,4BADhBA,EAEO,SAFPA,EAGiB,mBAEjBC,EACiB,kCAEjBC,EAOgB,SAASC,EAAUC,EAAQC,GACvC,OAAOb,EAAKc,KAAK,CAAC,CACdC,WAAa,iCACbC,KAAM,CACFL,SAAUA,EACVC,OAAQA,EACRC,OAAQA,MAEZ,IAWRI,EAAY,SAASC,GAErB,IAAIP,EAAWQ,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,QAC/EP,EAASO,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,MAC7EN,EAASM,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,GAEjFT,EAAwBC,EAAUC,EAAQC,GAAQS,KAAK,SAASC,GAC/B,GAAzBA,EAASC,MAAMJ,SACfG,EAASE,eAAiBC,EAAEC,KAAKC,UAAU,kBAAmB,oBAErD1B,EAAU2B,OAAOpB,EAA2Bc,GAClDD,KAAK,SAASQ,GACjB/B,EAAEmB,GAAMa,KAAKvB,GAA0BsB,KAAKA,GAC5CE,EAAqBd,KACtBe,KAAK,SAASC,GACbjC,EAAakC,UAAUD,GACvBF,EAAqBd,OAE1Be,KAAK,SAASC,GACbjC,EAAakC,UAAUD,GACvBF,EAAqBd,MAiBzBc,EAAuB,SAASd,GAChC,IAAIkB,EAAOjB,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,IAAmBA,UAAU,GAC1EpB,EAAEmB,GAAMmB,QAAQ7B,GAAiBuB,KAAKvB,GAA2B8B,YAAY,OAAQF,IAEzF,MAAO,CACHG,KAdO,SAASrB,GAChBD,EAAUC,IAcVD,UAAWA,EACXe,qBAAsBA","sourcesContent":["define([\n    'jquery',\n    'core/ajax',\n    'core/notification',\n    'core/templates',\n    'core/modal_factory',\n    'core/modal_events',\n    'core/fragment',\n    'block_remuiblck/modal_task_popup',\n    'block_remuiblck/events'\n], function(\n    $,\n    ajax,\n    Notification,\n    Templates,\n    ModalFactory,\n    ModalEvents,\n    Fragment,\n    ModalTaskPopup,\n    RemuiblckEvents\n) {\n    var SELECTORS = {\n        TASK_CONTAINER: '[data-region=\"task-list\"]',\n        PANEL: '.panel',\n        TASK_PROCESSING: '.task-processing'\n    };\n    var TEMPLATES = {\n        TASK_LIST_ITEMS: 'block_remuiblck/task-list-items'\n    };\n    var PROMISES = {\n        /**\n         * Get user tasks promise call\n         * @param  string duration duration selection\n         * @param  string status   status selection\n         * @return promise         ajax promise\n         */\n        GET_USER_TASKS: function(duration, status, search) {\n            return ajax.call([{\n                methodname : 'block_remuiblck_get_user_tasks',\n                args: {\n                    duration: duration,\n                    status: status,\n                    search: search\n                }\n            }])[0];\n        }\n    };\n\n    /**\n     * Load task in the tasks list\n     * @param DOM    root     block DOM object\n     * @param String duration duration selection\n     * @param String status   status selection\n     * @param String search   search query\n     */\n    var loadTasks = function(root) {\n\n        var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'today';\n        var status = arguments.length > 1 && arguments[2] !== undefined ? arguments[2] : 'all';\n        var search = arguments.length > 1 && arguments[3] !== undefined ? arguments[3] : '';\n\n        PROMISES.GET_USER_TASKS(duration, status, search).done(function(response) {\n            if (response.tasks.length == 0) {\n                response.no_tasks_image = M.util.image_url('empty_task_list', 'block_remuiblck');\n            }\n            var output = Templates.render(TEMPLATES.TASK_LIST_ITEMS, response);\n            output.done(function(html) {\n                $(root).find(SELECTORS.TASK_CONTAINER).html(html);\n                toggleTaskProcessing(root);\n            }).fail(function(ex) {\n                Notification.exception(ex);\n                toggleTaskProcessing(root);\n            });\n        }).fail(function(ex) {\n            Notification.exception(ex);\n            toggleTaskProcessing(root);\n        });\n    };\n\n    /**\n     * Load task on initialisation\n     * @param DOM root block DOM object\n     */\n    var init = function(root) {\n        loadTasks(root);\n    };\n\n    /**\n     * Toggle processing overlay to show that something happening in the background\n     * @param  {string}  root root element id\n     * @param  {Boolean} show true if wanna show overlay\n     */\n    var toggleTaskProcessing = function(root) {\n        var show = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        $(root).parents(SELECTORS.PANEL).find(SELECTORS.TASK_PROCESSING).toggleClass('show', show);\n    }\n    return {\n        init: init,\n        loadTasks: loadTasks,\n        toggleTaskProcessing: toggleTaskProcessing\n    };\n});\n"],"file":"task_view.min.js"}