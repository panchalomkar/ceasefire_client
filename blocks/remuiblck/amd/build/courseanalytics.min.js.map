{"version":3,"sources":["courseanalytics.js"],"names":["define","$","Ajax","Chart","CustomEvents","RemuiblckEvents","SELECTORS","PAGECOUNT","PAGINATE","NEXT","PREVIOUS","CHARTPAGINATION","PAGES","TOGGLELABELS","PER_PAGE_FILTER","FILTER_OPTION","window","analysisBar","pageNumber","maxPage","updateBars","root","totalBars","limit","perPage","start","end","undefined","labels","length","getStartEnd","find","text","M","util","get_string","to","total","analysisChart","data","datasets","forEach","dataset","update","i","push","index","generatePagination","removeClass","Math","round","addClass","createAnalysisChart","course_id","call","methodname","args","courseid","getAnalysisData","done","response","destroy","error","html","maxactivityname","minactivityname","highest","lowest","average","context","get","getContext","backgroundColor","label","canvas","height","type","options","responsive","maintainAspectRatio","tooltips","enabled","hover","animationDuration","layout","padding","top","legend","position","fontSize","animation","duration","easing","onComplete","chartInstance","this","chart","ctx","font","helpers","fontString","defaults","global","defaultFontSize","defaultFontStyle","defaultFontFamily","textAlign","textBaseline","meta","controller","getDatasetMeta","hidden","bar","fillText","_model","x","y","scales","xAxes","display","gridLines","yAxes","ticks","beginAtZero","getCourseAnalyticsPerPage","fail","xhr","status","hide","registerCourseAnalyticsPerPageFilter","courseAnalyticsPerPageFilterContainer","events","activate","on","e","originalEvent","preventDefault","option","target","closest","hasClass","trigger","COURSE_ANALYTICS_PAGE_FILTER_CHANGE","set_user_preference","init","document","ready","is","initEvents"],"mappings":"AAAAA,OAAO,CACH,SACA,YACA,eACA,iCACA,0BACD,SAAUC,EAAGC,EAAMC,EAAOC,EAAcC,GAEvC,IAAIC,EAAY,CACZC,UAAW,2BACXC,SAAU,yBACVC,KAAM,cACNC,SAAU,kBACVC,gBAAiB,6BACjBC,MAAO,sBACPC,aAAc,gBACdC,gBAAiB,kCACjBC,cAAe,gBAEnBC,OAAsB,cAAI,KAC1B,IAGIC,EAHAC,EAAa,EACbC,EAAU,EAuCd,SAASC,EAAWC,EAAMC,GAEtB,IAAIC,EA/BR,SAAqBC,GAEjB,IAAID,EAAQ,CACRE,MAAO,EACPC,IAAK,GAET,OAA0BC,MAAtBV,EAAYW,OACLL,EAGPN,EAAYW,OAAOC,QAAUL,GAC7BD,EAAME,MAAQ,EACdF,EAAMG,IAAMT,EAAYW,OAAOC,OACxBN,IAEXA,EAAME,MAAsB,GAAdP,EAAkB,GAAKA,EAAa,GAAKM,EAAU,EACjED,EAAMG,IAAMR,EAAaM,EACrBP,EAAYW,OAAOC,OAASN,EAAMG,MAClCH,EAAMG,IAAMT,EAAYW,OAAOC,QAE5BN,GAWKO,CAAYR,GAExBrB,EAAEoB,GAAMU,KAAKzB,EAAUM,OAAOoB,KAAKC,EAAEC,KAAKC,WAAW,gBAAiB,kBAAmB,CACrFV,MAAOF,EAAME,MACbW,GAAIb,EAAMG,IACVW,MAAOpB,EAAYW,OAAOC,UAI9BS,cAAcC,KAAKX,OAAS,GAC5BU,cAAcC,KAAKC,SAASC,QAAQ,SAASC,GACzCA,EAAQH,KAAO,KAEnBD,cAAcK,SAGd,IAAK,IAAIC,EAAIrB,EAAME,MAAQ,EAAGmB,GAAKrB,EAAMG,IAAKkB,IAC1CN,cAAcC,KAAKX,OAAOiB,KAAK5B,EAAYW,OAAOgB,IAClDN,cAAcC,KAAKC,SAASC,QAAQ,SAASC,EAASI,GAClDJ,EAAQH,KAAKM,KAAK5B,EAAYuB,SAASM,GAAOP,KAAKK,MAEvDN,cAAcK,SAUtB,SAASI,EAAmB1B,EAAMG,GAEJG,MAAtBV,EAAYW,QAIhBV,EAAa,EAIbjB,EAAEoB,GAAMU,KAAKzB,EAAUK,iBAAiBqC,YAAY,UACpD7B,EAAUF,EAAYW,OAAOC,OAASL,EAAUyB,KAAKC,MAAMjC,EAAYW,OAAOC,OAASL,GAAW,EAClGJ,EAAWC,EAAMG,IATbvB,EAAEoB,GAAMU,KAAKzB,EAAUK,iBAAiBwC,SAAS,UAiCzD,SAASC,EAAoB/B,IAf7B,SAAyBA,GACrB,IAAIgC,EAAYpD,EAAEoB,GAAMU,KAAK,uCAAuCQ,KAAK,MACzE,OAAOrC,EAAKoD,KAAK,CAAC,CACdC,WAAY,uCACZC,KAAM,CACFC,SAAUJ,MAEd,IASJK,CAAgBrC,GACfsC,KAAK,SAAUC,GACZ3C,EAAc2C,EACd1C,EAAa,EACS,OAAlBoB,eACAA,cAAcuB,UAGdD,EAASE,OACT7D,EAAEoB,GAAMU,KAAK,oBAAoBgC,KAAK,IACtC9D,EAAEoB,GAAMU,KAAK,mBAAmBgC,KAAK,IAErC9D,EAAEoB,GAAMU,KAAK,iBAAiBgC,KAAK,KACnC9D,EAAEoB,GAAMU,KAAK,gBAAgBgC,KAAK,KAClC9D,EAAEoB,GAAMU,KAAK,iBAAiBgC,KAAK,OAEnC9D,EAAEoB,GAAMU,KAAK,oBAAoBgC,KAAK9C,EAAY+C,iBAClD/D,EAAEoB,GAAMU,KAAK,mBAAmBgC,KAAK9C,EAAYgD,iBAEjDhE,EAAEoB,GAAMU,KAAK,iBAAiBgC,KAAK9C,EAAYiD,SAC/CjE,EAAEoB,GAAMU,KAAK,gBAAgBgC,KAAK9C,EAAYkD,QAC9ClE,EAAEoB,GAAMU,KAAK,iBAAiBgC,KAAK9C,EAAYmD,UAGnD,IAAIC,EAAUpE,EAAEoB,GAAMU,KAAK,kBAAkBuC,IAAI,GAAGC,WAAW,MAC3D/B,EAAW,GACUb,MAArBiC,EAASpB,UACToB,EAASpB,SAASC,QAAQ,SAASC,GAC/BF,EAASK,KAAK,CACVN,KAAM,GACNiC,gBAAiB9B,EAAQ8B,gBACzBC,MAAO/B,EAAQ+B,UAI3BJ,EAAQK,OAAOC,OAAS,IACxBrC,cAAgB,IAAInC,EAAMkE,EAAS,CAC/B9B,KAAM,CACFX,OAAQ,GACRY,SAAUA,GAEdoC,KAAM,MACNC,QAAS,CACLC,YAAY,EACZC,qBAAqB,EACrBC,SAAU,CACNC,SAAS,GAEbC,MAAO,CACHC,kBAAmB,GAEvBC,OAAQ,CACJC,QAAS,CACLC,IAAK,KAGbC,OAAQ,CACJC,SAAU,SACV5D,OAAQ,CACJyD,QAAS,GACTI,SAAU,KAIlBC,UAAW,CACPC,SAAU,IACVC,OAAQ,gBACRC,WAAY,WACR,IAAIC,EAAgBC,KAAKC,MACrBC,EAAMH,EAAcG,IACxBA,EAAIC,KAAO/F,EAAMgG,QAAQC,WAAWjG,EAAMkG,SAASC,OAAOC,gBAAiBpG,EAAMkG,SAASC,OAAOE,iBAAkBrG,EAAMkG,SAASC,OAAOG,mBACzIR,EAAIS,UAAY,SAChBT,EAAIU,aAAe,SAEnBZ,KAAKxD,KAAKC,SAASC,QAAQ,SAAUC,EAASE,GAC1C,IAAIgE,EAAOd,EAAce,WAAWC,eAAelE,GAChC,GAAfgE,EAAKG,QACLH,EAAKrE,KAAKE,QAAQ,SAAUuE,EAAKlE,GAC7B,IAAIP,EAAOG,EAAQH,KAAKO,GACxBmD,EAAIgB,SAAS1E,EAAMyE,EAAIE,OAAOC,EAAGH,EAAIE,OAAOE,EAAI,SAMpEC,OACA,CACIC,MAAO,CAAC,CACJC,SAAS,EACTC,UAAW,CACPD,SAAS,KAGjBE,MAAO,CAAC,CACJC,MAAO,CACHC,aAAa,GAEjBH,UAAW,CACPD,SAAS,SAM7BxE,EAAmB1B,EAAMuG,EAA0BvG,MAEtDwG,KAAK,SAAUC,EAAKC,EAAQjE,GACzB7D,EAAEoB,GAAMU,KAAK,2BAA2BiG,SAShD,IAAIC,EAAuC,SAAS5G,GAChD,IAAI6G,EAAwCjI,EAAEoB,GAAMU,KAAKzB,EAAUQ,iBACnEV,EAAaJ,OAAOkI,EAAuC,CAAC9H,EAAa+H,OAAOC,WAChFF,EAAsCG,GAClCjI,EAAa+H,OAAOC,SACpB9H,EAAUS,cACV,SAASuH,EAAG/F,GACRA,EAAKgG,cAAcC,iBAEnB,IAAIC,EAASxI,EAAEqI,EAAEI,QAAQC,QAAQrI,EAAUS,eAEvC0H,EAAOG,SAAS,YAKpB3I,EAAEqI,EAAEI,QAAQG,QAAQxI,EAAgByI,qCACpC7G,EAAEC,KAAK6G,oBAAoB,yBAA0BN,EAAOlG,KAAK,UACjEQ,EAAmB1B,EAAMoH,EAAOlG,KAAK,cAW7CqF,EAA4B,SAASvG,GACrC,OAAOpB,EAAEoB,GAAMU,KAAKzB,EAAUQ,iBAAiBiB,KAAKzB,EAAUS,cAAgB,WAAWwB,KAAK,UAmDlG,MAAO,CACHyG,KAVO,SAAS3H,GAChBpB,EAAEgJ,UAAUC,MAAM,YAnCtB,SAAoB7H,GAEhB4G,EAAqC5G,GAGrCpB,EAAE,QAAQoI,GAAG,QAAShH,EAAO,IAAMf,EAAUE,SAAU,WACnD,GAAIP,EAAE8F,MAAMoD,GAAG7I,EAAUG,MAAO,CAC5B,GAAIS,GAAcC,EACd,OAEJD,QACG,CAAA,IAAGjB,EAAE8F,MAAMoD,GAAG7I,EAAUI,UAM3B,OALA,GAAkB,GAAdQ,EACA,OAEJA,IAIJ,IAAIM,EAAUoG,EAA0BvG,GACxCD,EAAWC,EAAMG,KAIrBvB,EAAE,QAAQoI,GAAG,SAAUhH,EAAO,uBAAwB,WAClD+B,EAAoB/B,KAWpB+H,CAAW/H,GACPpB,EAAEoB,GAAMU,KAAK,kBAAkBF,QAC/BuB,EAAoB/B","sourcesContent":["define([\n    'jquery',\n    'core/ajax',\n    'core/chartjs',\n    'core/custom_interaction_events',\n    'block_remuiblck/events'\n], function ($, Ajax, Chart, CustomEvents, RemuiblckEvents) {\n\n    var SELECTORS = {\n        PAGECOUNT: '[data-action-page-count]',\n        PAGINATE: '[data-action-paginate]',\n        NEXT: '[data-next]',\n        PREVIOUS: '[data-previous]',\n        CHARTPAGINATION: '.analysis-chart-pagination',\n        PAGES: '[data-region-pages]',\n        TOGGLELABELS: '#togglelabels',\n        PER_PAGE_FILTER: '[data-region=\"per-page-filter\"]',\n        FILTER_OPTION: '[data-value]'\n    };\n    window['analysisChart'] = null;\n    var pageNumber = 1;\n    var maxPage = 1;\n    /* Course Analytics Block */\n    var analysisBar;\n\n    /**\n     * Get start and end index of bar data\n     *\n     * @param  {Number} perPage Total number of bars per page\n     * @return {Object}         Object with start and end value of bars\n     */\n    function getStartEnd(perPage) {\n        // default limit is 0\n        var limit = {\n            start: 0,\n            end: 0\n        };\n        if (analysisBar.labels == undefined) {\n            return limit;\n        }\n        // if number of bars is less or equal to per page then return limit with 1 and bars count\n        if (analysisBar.labels.length <= perPage) {\n            limit.start = 1;\n            limit.end = analysisBar.labels.length;\n            return limit;\n        }\n        limit.start = pageNumber == 1 ? 1 : (pageNumber - 1) * perPage + 1;\n        limit.end = pageNumber * perPage;\n        if (analysisBar.labels.length < limit.end) {\n            limit.end = analysisBar.labels.length;\n        }\n        return limit;\n    }\n\n    /**\n     * Update bars data in the chart based on start and end of bars\n     *\n     * @param {String} root      block root element id\n     * @param {Number} totalBars Total bar which can be shown in the chart\n     */\n    function updateBars(root, totalBars) {\n        // var {start, end} = getStartEnd(totalBars);\n        var limit = getStartEnd(totalBars);\n        // Update pagination label\n        $(root).find(SELECTORS.PAGES).text(M.util.get_string('showingfromto', 'block_remuiblck', {\n            start: limit.start,\n            to: limit.end,\n            total: analysisBar.labels.length\n        }));\n\n        // Remove previous bar data\n        analysisChart.data.labels = [];\n        analysisChart.data.datasets.forEach(function(dataset) {\n            dataset.data = [];\n        });\n        analysisChart.update();\n\n        // Add new bar data and re-render the chart\n        for (var i = limit.start - 1; i <= limit.end; i++) {\n            analysisChart.data.labels.push(analysisBar.labels[i]);\n            analysisChart.data.datasets.forEach(function(dataset, index) {\n                dataset.data.push(analysisBar.datasets[index].data[i]);\n            });\n            analysisChart.update();\n        }\n    }\n\n    /**\n     * Generate pagination data on page load\n     *\n     * @param {String} root    block root element id\n     * @param {Number} perpage bars to be shown per page\n     */\n    function generatePagination(root, perPage) {\n        // If there is no data then hide pagination and return\n        if (analysisBar.labels == undefined) {\n            $(root).find(SELECTORS.CHARTPAGINATION).addClass('d-none');\n            return;\n        }\n        pageNumber = 1;\n        // var {start, end} = getStartEnd(perPage);\n\n        // Show pagination\n        $(root).find(SELECTORS.CHARTPAGINATION).removeClass('d-none');\n        maxPage = analysisBar.labels.length > perPage ? Math.round(analysisBar.labels.length / perPage) : 1;\n        updateBars(root, perPage);\n    }\n\n    /**\n     * Get Analysis Data using ajax\n     *\n     * @param  {String} root block root element id\n     * @return {Ajax}   Ajax promise\n     */\n    function getAnalysisData(root) {\n        var course_id = $(root).find('#coursecategorylist option:selected').data('id');\n        return Ajax.call([{\n            methodname: 'block_remuiblck_get_course_analytics',\n            args: {\n                courseid: course_id\n            }\n        }])[0];\n    }\n\n    /**\n     * Create analysis chart from ajax data\n     *\n     * @param {String} root block root element id\n     */\n    function createAnalysisChart(root) {\n        getAnalysisData(root)\n        .done(function (response) {\n            analysisBar = response;\n            pageNumber = 1;\n            if (analysisChart !== null) {\n                analysisChart.destroy();\n            }\n\n            if (response.error) {\n                $(root).find(\"#highestactivity\").html(\"\");\n                $(root).find(\"#lowestactivity\").html(\"\");\n\n                $(root).find(\"#highestgrade\").html(\"0\");\n                $(root).find(\"#lowestgrade\").html(\"0\");\n                $(root).find(\"#averagegrade\").html(\"0\");\n            } else {\n                $(root).find(\"#highestactivity\").html(analysisBar.maxactivityname);\n                $(root).find(\"#lowestactivity\").html(analysisBar.minactivityname);\n\n                $(root).find(\"#highestgrade\").html(analysisBar.highest);\n                $(root).find(\"#lowestgrade\").html(analysisBar.lowest);\n                $(root).find(\"#averagegrade\").html(analysisBar.average);\n            }\n\n            var context = $(root).find(\"#analysischart\").get(0).getContext(\"2d\");\n            var datasets = [];\n            if (response.datasets != undefined) {\n                response.datasets.forEach(function(dataset) {\n                    datasets.push({\n                        data: [],\n                        backgroundColor: dataset.backgroundColor,\n                        label: dataset.label\n                    });\n                });\n            }\n            context.canvas.height = 400;\n            analysisChart = new Chart(context, {\n                data: {\n                    labels: [],\n                    datasets: datasets\n                },\n                type: 'bar',\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    tooltips: {\n                        enabled: true\n                    },\n                    hover: {\n                        animationDuration: 0\n                    },\n                    layout: {\n                        padding: {\n                            top: 20\n                        }\n                    },\n                    legend: {\n                        position: 'bottom',\n                        labels: {\n                            padding: 20,\n                            fontSize: 12\n                        }\n\n                    },\n                    animation: {\n                        duration: 300,\n                        easing: 'easeInOutQuad',\n                        onComplete: function () {\n                            var chartInstance = this.chart,\n                                ctx = chartInstance.ctx;\n                            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);\n                            ctx.textAlign = 'center';\n                            ctx.textBaseline = 'bottom';\n\n                            this.data.datasets.forEach(function (dataset, i) {\n                                var meta = chartInstance.controller.getDatasetMeta(i);\n                                if (meta.hidden != true) {\n                                    meta.data.forEach(function (bar, index) {\n                                        var data = dataset.data[index];\n                                        ctx.fillText(data, bar._model.x, bar._model.y - 5);\n                                    });\n                                }\n                            });\n                        }\n                    },\n                    scales:\n                    {\n                        xAxes: [{\n                            display: false,\n                            gridLines: {\n                                display: true,\n                            }\n                        }],\n                        yAxes: [{\n                            ticks: {\n                                beginAtZero: true,\n                            },\n                            gridLines: {\n                                display: true\n                            },\n                        }]\n                    }\n                }\n            });\n            generatePagination(root, getCourseAnalyticsPerPage(root));\n        })\n        .fail(function (xhr, status, error) {\n            $(root).find('div#analysis-chart-area').hide();\n        });\n    }\n\n    /**\n     * Event listener for the per page selector\n     *\n     * @param {object} root The root element for the manage courses block\n     */\n    var registerCourseAnalyticsPerPageFilter = function(root) {\n        var courseAnalyticsPerPageFilterContainer = $(root).find(SELECTORS.PER_PAGE_FILTER);\n        CustomEvents.define(courseAnalyticsPerPageFilterContainer, [CustomEvents.events.activate]);\n        courseAnalyticsPerPageFilterContainer.on(\n            CustomEvents.events.activate,\n            SELECTORS.FILTER_OPTION,\n            function(e, data) {\n                data.originalEvent.preventDefault();\n\n                var option = $(e.target).closest(SELECTORS.FILTER_OPTION);\n\n                if (option.hasClass('active')) {\n                    // If it's already active then we don't need to do anything.\n                    return;\n                }\n\n                $(e.target).trigger(RemuiblckEvents.COURSE_ANALYTICS_PAGE_FILTER_CHANGE);\n                M.util.set_user_preference('courseanalyticsperpage', option.data('value'));\n                generatePagination(root, option.data('value'));\n            }\n        );\n    };\n\n    /**\n     * Get manage courses filter dropdown selection\n     *\n     * @param  DOM    root block root element id\n     * @return string      selected per page courses\n     */\n    var getCourseAnalyticsPerPage = function(root) {\n        return $(root).find(SELECTORS.PER_PAGE_FILTER).find(SELECTORS.FILTER_OPTION + '.active').data('value');\n    }\n\n    /**\n     * Initialize event listerns\n     *\n     * @param  {String} root block root element id\n     */\n    function initEvents(root) {\n        // Initialize per page filter events\n        registerCourseAnalyticsPerPageFilter(root);\n\n        // Traverse through page\n        $('body').on('click', root + ' ' + SELECTORS.PAGINATE, function() {\n            if ($(this).is(SELECTORS.NEXT)) {\n                if (pageNumber == maxPage) {\n                    return;\n                }\n                pageNumber++;\n            } else if($(this).is(SELECTORS.PREVIOUS)) {\n                if (pageNumber == 1) {\n                    return;\n                }\n                pageNumber--;\n            } else {\n                return;\n            }\n            var perPage = getCourseAnalyticsPerPage(root);\n            updateBars(root, perPage);\n        });\n\n        //Update chart on courses dropdown change\n        $('body').on('change', root + ' #coursecategorylist', function () {\n            createAnalysisChart(root);\n        });\n    }\n\n    /**\n     * Main method to be initialised for course analytics block\n     *\n     * @param  {String} root block root element id\n     */\n    var init = function(root) {\n        $(document).ready(function() {\n            initEvents(root);\n            if ($(root).find('#analysischart').length) {\n                createAnalysisChart(root);\n            }\n        });\n    };\n\n    return {\n        init: init\n    }\n\n});\n"],"file":"courseanalytics.min.js"}